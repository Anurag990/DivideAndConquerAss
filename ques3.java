package DivideAndConquer;import java.util.*;public class ques3 {    public static void segregatePositiveNegative(int[] nums) {        int n = nums.length;        // Partition the array into negative and non-negative parts        int negativeIndex = 0;        for (int i = 0; i < n; i++) {            if (nums[i] < 0) {                swap(nums, i, negativeIndex);                negativeIndex++;            }        }        // Merge negative and non-negative parts while maintaining relative order        int positiveIndex = negativeIndex;        while (positiveIndex < n && nums[positiveIndex] < 0) {            swap(nums, negativeIndex, positiveIndex);            negativeIndex++;            positiveIndex++;        }    }    private static void swap(int[] nums, int i, int j) {        int temp = nums[i];        nums[i] = nums[j];        nums[j] = temp;    }    public static void main(String[] args) {        int[] nums = {19, -20, 7, -4, -13, 11, -5, 3};        System.out.println("Original Array: " + Arrays.toString(nums));        segregatePositiveNegative(nums);        System.out.println("Segregated Array: " + Arrays.toString(nums));    }}